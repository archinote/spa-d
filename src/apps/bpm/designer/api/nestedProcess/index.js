/**
 * API module
 * BPM Execution API
 */
import { ApiModule } from '@/api/api-module'
import routes from './routes'
import uuidv4 from 'uuid/v4'

export class ApiNestedProcess extends ApiModule {

  list({ model_id }) {
    return new Promise((resolve, reject) => {
      let apiPath = routes.index.replace("{model_id}", model_id)

      this.http.get(apiPath).then(response => {
        // console.log("Nested Process API, 'list' action, server response:")
        // console.log(response)

        if (response.status == 200 && response.data && response.data.list) {
          resolve( response.data.list )
        } else {
          reject("Error occurres while loading data from server")
        }
      }).catch(error => {
        reject(error)
      })
    })
  }

  item({ model_id, id }) {
    return new Promise((resolve, reject) => {
      let apiPath = routes.show.replace("{model_id}", model_id).replace("{submodel_id}", id)

      this.http.get(apiPath).then(response => {
        // TODO - need to check server response
        console.log("Nested Process API, GET 'item', server response:")
        console.log(response)

        if (response.status == 200 && response.data && response.data.item) {
          resolve( response.data.item )
        } else {
          reject("Error occurres while loading data from server")
        }
      }).catch(error => {
        reject(error)
      })
    })
  }

  create( data ) {
    return new Promise((resolve, reject) => {
      let apiPath = routes.create.replace("{model_id}", data.model_id)

      // Generate ID for a new item.
      if (typeof data.id === 'undefined' || !data.id) {
        data.id = uuidv4()
      }

      this.http.put(apiPath, data).then(response => {
        // console.log("Nested Process API, 'create', server response:")
        // console.log(response)

        if (response.status == 201) {
          // Fill ID property if it was generated by server.
          if (typeof data.id === 'undefined' && response.data && response.data.id) {
            data.id = response.data.id
          }

          resolve( data )
        } else {
          reject("Error occurres while creating data.")
        }
      }).catch(error => {
        reject(error)
      })
    })
  }

  update( data ) {
    return new Promise((resolve, reject) => {
      let apiPath = routes.update.replace("{model_id}", data.model_id).replace("{submodel_id}", data.id)

      this.http.patch(apiPath, data).then(response => {
        // console.log("Nested Process API, 'update', server response:")
        // console.log(response)

        if (response.status == 200) {
          resolve( data )
        } else {
          reject("Error occurres while updating data.")
        }
      }).catch(error => {
        reject(error)
      })
    })
  }

  delete({ model_id, id }) {
    return new Promise((resolve, reject) => {
      let apiPath = routes.delete.replace("{model_id}", model_id).replace("{submodel_id}", id)

      this.http.delete(apiPath).then(response => {
        // console.log("Nested Process API, 'delete', server response:")
        // console.log(response)

        if (response.status == 200) {
          resolve( true )
        } else {
          reject("Error occurres while deleting data.")
        }
      }).catch(error => {
        reject(error)
      })
    })
  }
}

// Create and export module class instance.
const apiNestedProcess = new ApiNestedProcess('nestedProcess')
export default apiNestedProcess
