/**
 * API module
 * BPM Constructor Model Parameters (Process Data) API
 * Data to own Ports bindings
 */
import { ApiModule } from '@/api/api-module'
import routes from './routes'
import uuidv4 from 'uuid/v4'

export class ApiProcessDataPortBinding extends ApiModule {
  list( processId ) {
    return new Promise((resolve, reject) => {
      const apiPath = routes.portBinding.index.replace('{model_id}', processId)

      this.http.get(apiPath).then(response => {
        if (response.status == 200 && response.data) {
          resolve(response.data.list)
        } else {
          reject('Error')
        }
      }).catch(error => {
        console.error(error)
        reject(error)
      })
    })
  }

  create( processId, data ) {
    return new Promise((resolve, reject) => {
      const apiPath = routes.portBinding.create.replace('{model_id}', processId)

      // Generate ID for a new item.
      if (typeof data.id === 'undefined' || !data.id) {
        data.id = uuidv4()
      }

      this.http.put(apiPath, data).then(response => {
        if (response.status == 201) {
          // Fill ID property if it was generated by server.
          if (typeof data.id === 'undefined' && response.data && response.data.id) {
            data.id = response.data.id
          }
          resolve( data )
        } else {
          reject('Error occurres while creating data.')
        }
      }).catch(error => {
        reject(error)
      })
    })
  }

  update( processId, data ) {
    return new Promise((resolve, reject) => {
      const apiPath = routes.portBinding.update.replace('{model_id}', processId).replace('{binding_id}', data.id)

      this.http.patch(apiPath, data).then(response => {
        if (response.status == 200) {
          resolve( data )
        } else {
          reject('Error occurres while updating data.')
        }
      }).catch(error => {
        reject(error)
      })
    })
  }

  updateAll( processId, data ) {
    return new Promise((resolve, reject) => {
      const apiPath = routes.portBinding.updateAll.replace('{model_id}', processId)

      this.http.patch(apiPath, data).then(response => {
        if (response.status == 200) {
          resolve( data )
        } else {
          reject('Error occurres while updating data.')
        }
      }).catch(error => {
        reject(error)
      })
    })
  }

  delete( processId, id ) {
    return new Promise((resolve, reject) => {
      const apiPath = routes.portBinding.delete.replace('{model_id}', processId).replace('{binding_id}', id)

      this.http.delete(apiPath).then(response => {
        if (response.status == 200) {
          resolve( response )
        } else {
          reject('Error occurres while deleting data.')
        }
      }).catch(error => {
        reject(error)
      })
    })
  }

  deleteAll( processId ) {
    return new Promise((resolve, reject) => {
      const apiPath = routes.portBinding.deleteAll.replace('{model_id}', processId)

      this.http.delete(apiPath).then(response => {
        if (response.status == 200) {
          resolve( response )
        } else {
          reject('Error occurres while deleting data.')
        }
      }).catch(error => {
        reject(error)
      })
    })
  }
}

const apiProcessDataPortBinding = new ApiProcessDataPortBinding('processDataPortBinding')

export default apiProcessDataPortBinding
