/**
 * API module
 * BPM Port data API
 */
import { ApiModule } from '@/api/api-module'
import routes from './routes'
import uuidv4 from 'uuid/v4'

export class ApiPortData extends ApiModule {

  list( processId, portId ) {
    return new Promise((resolve, reject) => {
      let apiPath = routes.data.index.replace("{model_id}", processId).replace("{port_id}", portId)

      this.http.get(apiPath).then(response => {
        // console.log("PortData API, 'list' action, server response:")
        // console.log(response)

        if (response.status == 200 && response.data && response.data.list) {
          resolve( response.data.list )
        } else {
          reject("Error occurres while loading data from server")
        }
      }).catch(error => {
        reject(error)
      })
    })
  }

  item( processId, portId, id ) {
    return new Promise((resolve, reject) => {
      let apiPath = routes.data.show.replace("{model_id}", processId).replace("{port_id}", portId).replace("{data_id}", id)

      this.http.get(apiPath).then(response => {
        // TODO - need to check server response
        console.log("PortData API, GET 'item', server response:")
        console.log(response)

        if (response.status == 200 && response.data && response.data.item) {
          resolve( response.data.item )
        } else {
          reject("Error occurres while loading data from server")
        }
      }).catch(error => {
        reject(error)
      })
    })
  }

  create( processId, portId, data ) {
    return new Promise((resolve, reject) => {
      if (processId && portId && data) {
        let apiPath = routes.data.create.replace("{model_id}", processId).replace("{port_id}", portId)

        // Generate ID for a new item.
        data.id = uuidv4()
        // Or clear it to let server generate entity ID.
        // data.id = undefined

        this.http.put(apiPath, data).then(response => {
          // console.log("PortData API, 'create', server response:")
          // console.log(response)

          if (response.status == 201) {
            // Fill ID property if it was generated by server.
            if (typeof data.id === 'undefined' && response.data && response.data.id) {
              data.id = response.data.id
            }

            resolve( data )
          } else {
            reject("Error occurres while updating PORT data.")
          }
        }).catch(error => {
          reject(error)
        })
      }
    })
  }

  update( processId, portId, id, data ) {
    return new Promise((resolve, reject) => {
      if (processId && portId && id) {
        let apiPath = routes.data.update.replace("{model_id}", processId).replace("{port_id}", portId).replace("{data_id}", id)

        this.http.patch(apiPath, data).then(response => {
          // console.log("PortData API, 'update', server response:")
          // console.log(response)

          if (response.status == 200) {
            resolve( data )
          } else {
            reject("Error occurres while updating PORT data.")
          }
        }).catch(error => {
          reject(error)
        })
      }
    })
  }

  delete( processId, portId, id ) {
    return new Promise((resolve, reject) => {
      if (processId && portId && id) {
        let apiPath = routes.data.delete.replace("{model_id}", processId).replace("{port_id}", portId).replace("{data_id}", id)

        this.http.delete(apiPath).then(response => {
          // console.log("PortData API, 'delete', server response:")
          // console.log(response)

          if (response.status == 200) {
            resolve( true )
          } else {
            reject("Error occurres while deleting PORT data.")
          }
        }).catch(error => {
          reject(error)
        })
      }
    })
  }
}

// Create and export module class instance.
const apiPortData = new ApiPortData('portData')
export default apiPortData
