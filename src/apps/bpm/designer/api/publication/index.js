/**
 * API module
 * Port publication API
 */
import { ApiModule } from '@/api/api-module'
import routes from './routes'
import uuidv4 from 'uuid/v4'

export class ApiPortPublication extends ApiModule {

  list( portId ) {
    return new Promise((resolve, reject) => {
      // let apiPath = routes.index.replace("{model_id}", processId).replace("{port_id}", portId)
      let apiPath = routes.index

      this.http.get(apiPath, {
        params: {
          port_id: portId
        }
      }).then(response => {
        // console.log("PortPublication API, 'list' action, server response:")
        // console.log(response)

        if (response.status == 200 && response.data && response.data.list) {
          resolve( response.data.list )
        } else {
          reject("Error occurres while loading data from server")
        }
      }).catch(error => {
        reject(error)
      })
    })
  }

  // item( processId, portId, id ) {
  //   return new Promise((resolve, reject) => {
  //     let apiPath = routes.show.replace("{model_id}", processId).replace("{port_id}", portId).replace("{data_id}", id)
  //
  //     this.http.get(apiPath).then(response => {
  //       // TODO - need to check server response
  //       console.log("PortPublication API, GET 'item', server response:")
  //       console.log(response)
  //
  //       if (response.status == 200 && response.data && response.data.item) {
  //         resolve( response.data.item )
  //       } else {
  //         reject("Error occurres while loading data from server")
  //       }
  //     }).catch(error => {
  //       reject(error)
  //     })
  //   })
  // }

  create( portId, data ) {
    return new Promise((resolve, reject) => {
      if (portId && data) {
        let apiPath = routes.create.replace("{port_id}", portId)

        // Generate ID for a new item.
        if (typeof data.id === 'undefined' || !data.id) {
          data.id = uuidv4()
        }

        this.http.put(apiPath, data).then(response => {
          // console.log("PortPublication API, 'create', server response:")
          // console.log(response)

          if (response.status == 201) {
            // Fill ID property if it was generated by server.
            if (typeof data.id === 'undefined' && response.data && response.data.id) {
              data.id = response.data.id
            }

            resolve( data )
          } else {
            reject("Error occurres while updating PORT data.")
          }
        }).catch(error => {
          reject(error)
        })
      } else {
        reject("Missing Port ID or Port Data.")
      }
    })
  }

  // update( processId, portId, id, data ) {
  //   return new Promise((resolve, reject) => {
  //     if (processId && portId && id) {
  //       let apiPath = routes.update.replace("{model_id}", processId).replace("{port_id}", portId).replace("{data_id}", id)
  //
  //       this.http.patch(apiPath, data).then(response => {
  //         // console.log("PortPublication API, 'update', server response:")
  //         // console.log(response)
  //
  //         if (response.status == 200) {
  //           resolve( data )
  //         } else {
  //           reject("Error occurres while updating PORT data.")
  //         }
  //       }).catch(error => {
  //         reject(error)
  //       })
  //     }
  //   })
  // }

  delete( portId, id ) {
    return new Promise((resolve, reject) => {
      if (id) {
        let apiPath = routes.delete.replace("{publication_id}", id)

        this.http.delete(apiPath).then(response => {
          // console.log("PortPublication API, 'delete', server response:")
          // console.log(response)

          if (response.status == 200) {
            resolve( true )
          } else {
            reject("Error occurres while deleting PORT data.")
          }
        }).catch(error => {
          reject(error)
        })
      } else {
        reject("Missing Publication ID.")
      }
    })
  }
}

// Create and export module class instance.
const apiPortPublication = new ApiPortPublication('portPublication')
export default apiPortPublication
